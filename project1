package projecttrial;
import java.io.*;
import java.util.*;
public class Main {
	private static final String TEMP_FILE = "temp_offers.txt";
	public static void main(String[] args) {
		
	    String namefile = "C:\\Users\\Hamza\\Downloads\\name.txt";
	    String inventoryFile = "C:\\Users\\Hamza\\Downloads\\inventory.txt";
	    String ordersFile = "C:\\Users\\Hamza\\Downloads\\orders.txt";
	    String offersFile = "C:" + File.separator + "Users" + File.separator + "Hamza" + File.separator + "Downloads" + File.separator + "offerss.txt";

	    Scanner input = new Scanner(System.in);
	    while (true) {
	        System.out.println("Welcome to FreshMart - Your One-Stop Supermarket!");
	        System.out.println("Please enter 'login', 'signup', or 'exit' to continue:");

	        String option1 = input.nextLine().toLowerCase();
	        if (option1.equals("login")) {
	            String username = login(namefile, input);
	            if (username == null) {
	                continue; 
	            }
	            if (username.equals("admin")) {
	                adminMenu(inventoryFile, ordersFile, offersFile, input);
	            } else {
	                userMenu(username, inventoryFile, ordersFile, offersFile, input);
	            } 
	        } else if (option1.equals("signup")) {
	            signup(namefile, input);
	        } else if (option1.equals("exit")) {
	            System.out.println("Exiting the application. Goodbye!");
	            break;
	        } else {
	        	System.out.println( "Invalid option. Please enter 'login', 'signup', or 'exit'.");
	        }
	    }
	    input.close();
	}
	  public static String login(String nameFile, Scanner input) {
          while (true) {
              System.out.println("Please enter your username:");
              String name = input.nextLine();
              if (name.equalsIgnoreCase("exit")) return null;

              System.out.println("Please enter your password:");
              String pass = input.nextLine();
              if (name.equals("admin") && pass.equals("admin123")) {
                  System.out.println("Welcome, Admin!");
                  return "admin";
              }
              boolean match = false;
              try (BufferedReader reader = new BufferedReader(new FileReader(nameFile))) {
                  String line;
                  while ((line = reader.readLine()) != null) {
                      String[] parts = line.split(" ");
                      if (parts.length >= 2 && parts[0].equals(name) && parts[1].equals(pass)) {
                          match = true;
                          break;
                      }
                  }
              } catch (IOException e) {
                  System.out.println("Error reading the file: " + e.getMessage());
                  System.exit(0);
              }
              if (match) {
                  System.out.println("Welcome, " + name + "!");
                  return name;
              } else {
                  System.out.println("Incorrect username or password. Try again or type 'exit' to go back.");
              }
          }
      }
	  public static void signup(String nameFile, Scanner input) {
		    System.out.println("Please enter a username:");
		    String newName = input.nextLine();

		    System.out.println("Please enter a password:");
		    String newPass = input.nextLine();

		    String phoneNumber;
		    while (true) {
		        System.out.println("Please enter your phone number (11 digits):");
		        phoneNumber = input.nextLine();

		        if (phoneNumber.matches("\\d{11}")) break;
		        System.out.println("Invalid phone number. Please enter exactly 11 numbers.");
		    }

		    System.out.println("Please enter your address:");
		    String address = input.nextLine();

		    addLineToFile(nameFile, newName + " " + newPass + " " + phoneNumber + " " + address);
		    System.out.println("Signup successful!");
		}
	  
	  public static void adminMenu(String inventoryFile, String ordersFile, String offersFile, Scanner input) {
		    while (true) {
		        try {
		            System.out.println("\nAdmin Menu:");
		            System.out.println("1. View Inventory");
		            System.out.println("2. View Orders");
		            System.out.println("3. Manage Inventory");
		            System.out.println("4. Manage Today's Offers");
		            System.out.println("5. Logout (Go Back to Login/Signup)");
		            System.out.println("6. Exit");
		            System.out.print("Choose an option: ");
		            int choice = input.nextInt();
		            input.nextLine();

		            switch (choice) {
		                case 1:
		                    viewFileContents(inventoryFile, "Inventory");
		                    break;
		                case 2:
		                    viewFileContents(ordersFile, "Orders");
		                    break;
		                case 3:
		                    manageInventory(inventoryFile, input);
		                    break;
		                case 4:
		                    manageOffers(offersFile, input);
		                    break;
		                case 5:
		                    System.out.println("Returning to the main menu...");
		                    return;
		                case 6:
		                    System.out.println("Exiting...");
		                    System.exit(0);
		                    break;
		                default:
		                    System.out.println("Invalid choice. Please enter a valid option.");
		            }
		        } catch (InputMismatchException e) {
		            System.out.println("Invalid input. Please enter a number.");
		            input.nextLine(); // Clear the invalid input
		        }
		    }
		}

		public static void manageInventory(String inventoryFile, Scanner input) {
		    while (true) {
		        try {
		            System.out.println("\nManage Inventory:");
		            System.out.println("1. Add Item");
		            System.out.println("2. Remove Item");
		            System.out.println("3. Update Item Price");
		            System.out.println("4. Exit");
		            System.out.print("Choose an option: ");
		            int choice = input.nextInt();
		            input.nextLine(); // Consume the newline

		            switch (choice) {
		                case 1: {
		                    System.out.println("Enter category (e.g., Drinks, Groceries, Food):");
		                    String category = input.nextLine();
		                    System.out.println("Enter item name:");
		                    String itemName = input.nextLine();
		                    System.out.println("Enter price:");
		                    double price = input.nextDouble();
		                    input.nextLine(); // Consume the newline
		                    addLineToFile(inventoryFile, category + " " + itemName + " " + price);
		                    System.out.println("Item added successfully.");
		                }
		                break;
		                case 2: {
		                    System.out.println("Enter the item name to remove:");
		                    String removeItemName = input.nextLine();
		                    removeLineFromFile(inventoryFile, "temp_inventory.txt", removeItemName);
		                    System.out.println("Item removed successfully.");
		                }
		                break;
		                case 3: {
		                    System.out.println("Enter category (e.g., Drinks, Groceries, Food):");
		                    String category = input.nextLine();
		                    System.out.println("Enter the item name to update:");
		                    String updateItemName = input.nextLine();
		                    System.out.println("Enter new price:");
		                    double updatePrice = input.nextDouble();
		                    input.nextLine(); // Consume the newline
		                    String oldLine = category + " " + updateItemName;
		                    String newLine = category + " " + updateItemName + " " + updatePrice;
		                    updateLineInFile(inventoryFile, "temp_inventory.txt", oldLine, newLine);
		                    System.out.println("Item price updated successfully (if found).");
		                }
		                break;
		                case 4: {
		                    System.out.println("Exiting inventory management...");
		                    return;
		                }
		                default:
		                    System.out.println("Invalid choice. Try again.");
		            }
		        } catch (InputMismatchException e) {
		            System.out.println("Invalid input. Please enter the correct format.");
		            input.nextLine(); // Clear the invalid input
		        }
		    }
		}

		public static void manageOffers(String offersFile, Scanner input) {
		    while (true) {
		        try {
		            System.out.println("\nManage Today's Offers:");
		            System.out.println("1. View Offers");
		            System.out.println("2. Add Offer");
		            System.out.println("3. Update Offer");
		            System.out.println("4. Remove Offer");
		            System.out.println("5. Exit");
		            System.out.print("Choose an option: ");
		            int choice = input.nextInt();
		            input.nextLine();

		            switch (choice) {
		                case 1:
		                    viewFileContents(offersFile, "Today's Offers");
		                    break;
		                case 2: {
		                    System.out.println("Enter item name:");
		                    String itemName = input.nextLine();
		                    System.out.println("Enter original price:");
		                    double originalPrice = input.nextDouble();
		                    System.out.println("Enter discounted price:");
		                    double discountedPrice = input.nextDouble();
		                    input.nextLine();
		                    addLineToFile(offersFile, itemName + " " + originalPrice + " " + discountedPrice);
		                    System.out.println("Offer added successfully.");
		                }
		                break;
		                case 3: {
		                    System.out.println("Enter the item name to update:");
		                    String offerName = input.nextLine();
		                    System.out.println("Enter new discounted price:");
		                    double newPrice = input.nextDouble();
		                    input.nextLine();
		                    updateLineInFile(offersFile, "temp_offers.txt", offerName, offerName + " " + newPrice);
		                    System.out.println("Offer updated successfully (if found).");
		                }
		                break;
		                case 4: {
		                    System.out.println("Enter the item name to remove:");
		                    String removeOfferName = input.nextLine();
		                    removeLineFromFile(offersFile, "temp_offers.txt", removeOfferName);
		                    System.out.println("Offer removed successfully.");
		                }
		                break;
		                case 5: {
		                    System.out.println("Exiting offer management...");
		                    return;
		                }
		                default:
		                    System.out.println("Invalid choice. Try again.");
		            }
		        } catch (InputMismatchException e) {
		            System.out.println("Invalid input. Please enter the correct format.");
		            input.nextLine(); // Clear the invalid input
		        }
		    }
		}

		public static void viewFileContents(String filePath, String fileDescription) {
		    System.out.println("\n" + fileDescription + ":");
		    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
		        String line;
		        while ((line = reader.readLine()) != null) {
		            System.out.println(line);
		        }
		    } catch (IOException e) {
		        System.out.println("Error reading " + fileDescription.toLowerCase() + " file: " + e.getMessage());
		    }
		}

		public static void addLineToFile(String filePath, String lineToAdd) {
		    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath, true))) {
		        writer.write(lineToAdd);
		        writer.newLine();
		        System.out.println("Operation completed successfully!");
		    } catch (IOException e) {
		        System.out.println("Error writing to file: " + e.getMessage());
		    }
		}

		public static void removeLineFromFile(String inputFile, String tempFile, String keyword) {
		    File originalFile = new File(inputFile);
		    File temp = new File(tempFile);
		    boolean found = false;

		    try (BufferedReader reader = new BufferedReader(new FileReader(originalFile));
		         BufferedWriter writer = new BufferedWriter(new FileWriter(temp))) {
		        String line;
		        while ((line = reader.readLine()) != null) {
		            // Split the line into components to compare the exact item name
		            String[] parts = line.split("\\s+"); // Assuming space separates fields in the file
		            if (parts.length > 1 && parts[1].equalsIgnoreCase(keyword)) {
		                found = true; // Match found for the item name
		            } else {
		                writer.write(line);
		                writer.newLine();
		            }
		        }
		    } catch (IOException e) {
		        System.out.println("Error modifying file: " + e.getMessage());
		        return;
		    }

		    if (found) {
		        if (originalFile.delete() && temp.renameTo(originalFile)) {
		            System.out.println("Item removed successfully.");
		        } else {
		            System.out.println("Error completing the operation.");
		            temp.delete(); // Only delete temp if operation fails
		        }
		    } else {
		        System.out.println("Item not found in the inventory. No changes made.");
		        // Do not delete temp file here if item was not found
		    }
		}

		public static void updateLineInFile(String inputFile, String tempFile, String keyword, String updatedLine) {
		    File originalFile = new File(inputFile);
		    File temp = new File(tempFile);

		    try (BufferedReader reader = new BufferedReader(new FileReader(originalFile));
		         BufferedWriter writer = new BufferedWriter(new FileWriter(temp))) {
		        String line;
		        boolean updated = false;
		        while ((line = reader.readLine()) != null) {
		            if (line.contains(keyword)) {
		                writer.write(updatedLine);
		                writer.newLine();
		                updated = true;
		            } else {
		                writer.write(line);
		                writer.newLine();
		            }
		        }
		        if (!updated) {
		            System.out.println("Keyword not found: " + keyword);
		        }
		    } catch (IOException e) {
		        System.out.println("Error modifying file: " + e.getMessage());
		    }

		    if (originalFile.delete() && temp.renameTo(originalFile)) {
		        System.out.println("Operation completed successfully.");
		    } else {
		        System.out.println("Error completing the operation.");
		    }
		}

      public static void userMenu(String username, String inventoryFile, String ordersFile, String offersFile, Scanner input) {
          List<String> cart = new ArrayList<>();
          List<Double> prices = new ArrayList<>();
          while (true) {
              System.out.println("\nWelcome to the Supermarket!");
              System.out.println("What would you like to browse?");
              System.out.println("1. Drinks");
              System.out.println("2. Groceries");
              System.out.println("3. Food");
              System.out.println("4. Today's Offers");
              System.out.println("5. Checkout");
              System.out.println("6. Contact Us");
              System.out.println("7. Exit");
              if (input.hasNextInt()) {
                  int choice = input.nextInt();
                  input.nextLine();

                  switch (choice) {
                      case 1 :addToCart(inventoryFile, "Drinks", cart, prices, input, offersFile);
                      break;
                      case 2 : addToCart(inventoryFile, "Groceries", cart, prices, input, offersFile);
                      break;
                      case 3 :addToCart(inventoryFile, "Food", cart, prices, input, offersFile);
                      break;
                      case 4 : viewOffers(offersFile, cart, prices, input);
                      break;
                      case 5 : {
                          checkout(username, cart, prices, ordersFile, input);
                         
                          break;

                      }
                      case 6 : {
                          System.out.println("\nContact Information:");
                          System.out.println("For inquiries, email us at support@freshmart.com");
                          System.out.println("Or call us at +20-112-835-2807");
                      }break;
                      case 7 : {
                          System.out.println("Thank you for visiting! Goodbye!");
                          return;
                      }
                      default : System.out.println("Invalid choice. Please enter a number between 1 and 7.");
                  }
              } else {
                  System.out.println("Invalid input. Please enter a number.");
                  input.nextLine();
              }
          }
      }
      public static void viewOffers(String offersFile, List<String> cart, List<Double> prices, Scanner input) {
          System.out.println("\nToday's Offers:");
          Map<String, Double> offers = new HashMap<>();

          try (BufferedReader reader = new BufferedReader(new FileReader(offersFile))) {
              String line;
              while ((line = reader.readLine()) != null) {
                  String[] parts = line.split(" ");
                  if (parts.length == 3) {
                      String itemName = parts[0];
                      double discountedPrice = Double.parseDouble(parts[2]);
                      offers.put(itemName, discountedPrice);
                      System.out.println(itemName + ": Discounted Price = " + discountedPrice + " EGP");
                  }
              }
          } catch (IOException e) {
              System.out.println("Error reading offers file: " + e.getMessage());
          }

          if (offers.isEmpty()) {
              System.out.println("No offers available at the moment.");
          } else {
              System.out.println("\nChoose an offer to add to your cart or press 0 to go back:");
              String offerChoice = input.nextLine();
              if (offers.containsKey(offerChoice)) {
                  System.out.println("How many " + offerChoice + " would you like to add?");
                  int quantity = input.nextInt();
                  input.nextLine();
                  if (quantity > 0) {
                      cart.add(offerChoice + " x" + quantity);
                      prices.add(offers.get(offerChoice) * quantity);
                      System.out.println(quantity + " " + offerChoice + " added to your cart.");
                  } else {
                      System.out.println("Invalid quantity. Try again.");
                  }
              } else if (!offerChoice.equals("0")) {
                  System.out.println("Invalid offer. Try again.");
              }
          }
      }
      public static void addToCart(String inventoryFile, String category, List<String> cart, List<Double> prices, Scanner input, String offersFile) {
          Map<String, Double> offers = new HashMap<>();
          try (BufferedReader offersReader = new BufferedReader(new FileReader(offersFile))) {
              String line;
              while ((line = offersReader.readLine()) != null) {
                  String[] parts = line.split(" ");
                  if (parts.length == 3) {
                      String itemName = parts[0];
                      double discountedPrice = Double.parseDouble(parts[2]);
                      offers.put(itemName, discountedPrice);
                  }
              }
          } catch (IOException e) {
              System.out.println("Error reading offers file: " + e.getMessage());
          }
          try (BufferedReader inventoryReader = new BufferedReader(new FileReader(inventoryFile))) {
              String line;
              while ((line = inventoryReader.readLine()) != null) {
                  String[] parts = line.split(" ");
                  if (parts.length == 3 && parts[0].equalsIgnoreCase(category)) {
                      String itemName = parts[1];
                      double price = Double.parseDouble(parts[2]);
                      System.out.println(itemName + ": " + price + " EGP");
                  }
              }
              System.out.println("Enter the name of the item to add to your cart:");
              String itemChoice = input.nextLine();

              double priceToUse = 0.0;
              boolean foundItem = false;
              try (BufferedReader reader = new BufferedReader(new FileReader(inventoryFile))) {
                  String line2;
                  while ((line2 = reader.readLine()) != null) {
                      String[] parts = line2.split(" ");
                      if (parts[0].equalsIgnoreCase(category) && parts[1].equalsIgnoreCase(itemChoice)) {
                          priceToUse = Double.parseDouble(parts[2]);
                          foundItem = true;
                          break;
                      }
                  }
              } catch (IOException e) {
                  System.out.println("Error reading inventory file: " + e.getMessage());
              }

              if (!foundItem) {
                  System.out.println("Item not found.");
                  return;
              }

              if (offers.containsKey(itemChoice)) {
                  priceToUse = offers.get(itemChoice);
                  System.out.println(itemChoice + " is on offer! Discounted price: " + priceToUse + " EGP");
              }

              System.out.println("How many " + itemChoice + " would you like to add?");
              int quantity = input.nextInt();
              input.nextLine();

              if (quantity > 0) {
                  cart.add(itemChoice + " x" + quantity);
                  prices.add(priceToUse * quantity);
                  System.out.println(quantity + " " + itemChoice + " added to your cart.");
              } else {
                  System.out.println("Invalid quantity. Try again.");
              }
          } catch (IOException e) {
              System.out.println("Error reading inventory file: " + e.getMessage());
          }
      }
      public static void checkout(String username, List<String> cart, List<Double> prices, String ordersFile, Scanner input) {
          if (cart.isEmpty()) {
              System.out.println("Your cart is empty.");
              return;
          }
          double total = prices.stream().mapToDouble(Double::doubleValue).sum();
          System.out.println("\nYour cart contains:");
          cart.forEach(System.out::println);
          System.out.println("Total cost: " + total + " EGP");
          double shippingCost = total >= 200 ? 0.0 : 20.0;
          if (shippingCost == 0.0) {
              System.out.println("Congratulations! You get free shipping.");
          } else {
              System.out.println("Shipping cost: " + shippingCost + " EGP");
          }
          double finalTotal = total + shippingCost;
          System.out.println("Final total (including shipping): " + finalTotal + " EGP");

          while (true) {
              System.out.println("\nWould you like to confirm your order? (yes/no)");
              String confirmation = input.nextLine();
              if (confirmation.equalsIgnoreCase("yes")) {
                  try (BufferedWriter writer = new BufferedWriter(new FileWriter(ordersFile, true))) {
                      writer.write("Order by " + username + ":");
                      writer.newLine();
                      for (String item : cart) {
                          writer.write(item);
                          writer.newLine();
                      }
                      writer.write("Total: " + total + " EGP");
                      writer.newLine();
                      writer.write("Shipping: " + shippingCost + " EGP");
                      writer.newLine();
                      writer.write("Final Total: " + finalTotal + " EGP");
                      writer.newLine();
                      writer.write("======================================");
                      writer.newLine();
                      System.out.println("Order confirmed! Thank you for shopping with us.");
                      System.exit(0);
                  } catch (IOException e) {
                      System.out.println("Error writing to the orders file: " + e.getMessage());
                  }
                  return;
              } else if (confirmation.equalsIgnoreCase("no")) {
                  System.out.println("Order canceled. You can continue shopping.");
                  return;
              } else {
                  System.out.println("Invalid input. Please enter 'yes' or 'no'.");
              }
          }
      }
  }
